#!/usr/bin/make

# Makefile for libsecutils
#
# Copyright (c) Siemens Mobility GmbH, 2021
#
# Authors:
#  David von Oheimb <David.von.Oheimb@siemens.com>
#
# This work is licensed under the terms of the Apache Software License 2.0.
# See the COPYING file in the top-level directory.
#
# SPDX-License-Identifier: Apache-2.0

# Optional OPENSSL_DIR defines absolute or relative (to ../) path to OpenSSL installation
# Optional OPENSSL_LIB defines where to find the OpenSSL library installation (default: OPENSSL_DIR/lib).
# Optional CFLAGS and LDFLAGS are appended by local settings.
# Optional DEBUG_FLAGS may set to prepend to local CFLAGS and LDFLAGS (default see below).
# Builds are done in release mode if optional NDEBUG is defined.
# Optional OUT_DIR defines absolute or relative (to ./) path where to place the library.
# Optional DESTDIR defines a prefix for the installation target directories.

ROOTFS ?= $(DESTDIR)$(prefix)

ifeq ($(OUT_DIR),)
     override OUT_DIR = .
endif

VERSION=2.0
# must be kept in sync with debian/changelog and CMakeLists.txt
# PACKAGENAME=libsecutils
# DIRNAME=$(PACKAGENAME)-$(VERSION)

SHELL=bash # This is needed for supporting extended file name globbing

ifeq ($(OS),Windows_NT)
    EXE=.exe
    DLL=.dll
    OBJ=.obj
    LIB=bin
else
    EXE=
    OBJ=.o
    LIB=lib
    ifeq ($(shell uname -s),Darwin)
        OS=MacOS
        DLL=.dylib
        SONAME=install_name,@rpath/
    else # assuming Linux
        DLL=.so
        SONAME=soname,
    endif
endif

ifeq ($(OPENSSL_DIR),)
    OPENSSL_DIR=$(ROOTFS)/usr
endif
ifeq ($(shell echo $(OPENSSL_DIR) | grep "^/"),)
# $(OPENSSL_DIR) is relative path, assumed relative to ../
    OPENSSL=../$(OPENSSL_DIR)
    OPENSSL_LIB ?= ../$(OPENSSL_DIR)
else
# $(OPENSSL_DIR) is absolute path
    OPENSSL=$(OPENSSL_DIR)
    OPENSSL_LIB ?= $(OPENSSL_DIR)
endif

################################################################################
# Basic definitions targeted at debugging
#
# Can be overridden by command line arguments (not ENV variables!)
# Note: stuff for testing purposes should go here
################################################################################

ifdef NDEBUG
    DEBUG_FLAGS ?= -O2
    override DEBUG_FLAGS += -DNDEBUG=1
else
    DEBUG_FLAGS ?= -g -O0 -fsanitize=address -fsanitize=undefined -fno-sanitize-recover=all # not every compiler(version) supports -Og
endif
override CFLAGS += $(DEBUG_FLAGS) \
 -Wall -Woverflow -Wextra -Wswitch -Wmissing-prototypes -Wstrict-prototypes \
 -Wformat -Wformat-security -Wtype-limits -Wundef \
 -Wsign-compare -Wpointer-arith -Wunused-parameter
# TODO clean up code and re-enable warnings instead:
override CFLAGS += -Wno-conversion -Wno-sign-conversion \
 -Wno-shadow -Wno-declaration-after-statement -Wno-vla
override CFLAGS += -pedantic -DPEDANTIC -Werror

################################################################################
# Obligatory flags
#
# Can not be overriden
################################################################################

CC ?= gcc
OUTLIB_=libsecutils
OUTLIB=$(OUTLIB_)$(DLL)
ifeq ($(OS),MacOS)
    OUTLIBV=$(OUTLIB_).$(VERSION)$(DLL)
else
    OUTLIBV=$(OUTLIB).$(VERSION)
    override CFLAGS += -D_FORTIFY_SOURCE=2
endif
DEST_PRE=$(ROOTFS)/usr
DEST_LIB=$(DEST_PRE)/lib
DEST_INC=$(DEST_PRE)
DEST_DOC=$(DEST_PRE)/share/doc/libsecutils-dev
OUTBIN=icvutil$(EXE)
DEST_BIN=$(DEST_PRE)/bin
LOCAL_CFLAGS= -fPIC # -std=gnu90 TODO clean up code and re-enable flag
override CFLAGS += -isystem $(OPENSSL)/include# # # use of -isystem is critical for selecting wanted OpenSSL version
override CFLAGS += -Isrc/libsecutils/include
override CFLAGS += -Isrc/libsecutils/include/secutils
ifneq ($(SECUTILS_USE_UTA),)
    override CFLAGS += -DSECUTILS_USE_UTA=1
endif
ifneq ($(SECUTILS_USE_ICV),)
    override CFLAGS += -DSECUTILS_USE_ICV=1
endif

override LDFLAGS += $(DEBUG_FLAGS) # needed for -fsanitize=...
override LDFLAGS += -L $(OPENSSL_LIB) -L $(OPENSSL)
ifeq ($(DEB_TARGET_ARCH),) # not during Debian packaging
  override LDFLAGS += -Wl,-rpath,$(OPENSSL_LIB)
  ifneq ($(OPENSSL_LIB),$(OPENSSL))
    override LDFLAGS += -Wl,-rpath,$(OPENSSL)
  endif
endif
ifneq ($(SECUTILS_USE_UTA),)
    override LDFLAGS += -luta
endif
ifneq ($(SECUTILS_NO_TLS),)
    override CFLAGS += -DSECUTILS_NO_TLS=1
else
    override LDFLAGS += -lssl
endif
override LDFLAGS += -lcrypto

ifeq ($(COMPILE_TYPE), code_coverage)
    override CFLAGS += --coverage
    override LDFLAGS += --coverage
	COV_ENABLED=1
    unexport COMPILE_TYPE
endif

################################################################################
# Helper variables
################################################################################

# Directory for object files
BUILDDIR=tmp

# Path for automatic lookup of source files by Make
# Note: sort removes duplicate entries
VPATH := src/libsecutils/src
VPATH += $(sort $(dir $(wildcard src/libsecutils/src/*/)))

################################################################################
# Objects lists
################################################################################

# Target object files lookup in src directory (and mapping to build directory)
OBJS := $(patsubst %.c,$(BUILDDIR)/%$(OBJ),$(notdir $(wildcard src/libsecutils/src/*/*.c)))

################################################################################
# Targets
################################################################################

# Phony (non-file) targets
.PHONY: all doc util build build_only build_all clean clean_config clean_all clean_uta install uninstall deb clean_deb coverage

# Default target
all: build_all doc

build_only: $(OUT_DIR)/$(OUTLIB)

build:
ifeq ($(COV_ENABLED), 1)
	COMPILE_TYPE=code_coverage
endif
	$(MAKE) -f Makefile_v1 COMPILE_TYPE=$(COMPILE_TYPE) build_only

SECUTILS_CONFIG=src/libsecutils/include/secutils/secutils_static_config.h
util: $(SECUTILS_CONFIG)
ifneq ($(SECUTILS_USE_ICV),)
	$(MAKE) -C src/util -f Makefile_v1 CFLAGS="$(CFLAGS) $(LOCAL_CFLAGS)" LDFLAGS="$(LDFLAGS)" OUT_DIR="$(OUT_DIR)"
endif

build_all: build util

$(SECUTILS_CONFIG): $(SECUTILS_CONFIG).in # limitation: this is not triggered when any of the env. vars changes
	cp $< $@
ifdef SECUTILS_USE_UTA
	@ # note that sed -i '' (for not saving a backup file) works on MacOS but not on Linux
	@sed -i~ -e 's|#cmakedefine SECUTILS_USE_UTA|#define SECUTILS_USE_UTA|' $@
else
	@sed -i~ -e 's|#cmakedefine SECUTILS_USE_UTA|/* #undef SECUTILS_USE_UTA */|' $@
endif
ifdef SECUTILS_USE_ICV
	@sed -i~ -e 's|#cmakedefine SECUTILS_USE_ICV|#define SECUTILS_USE_ICV|' $@
else
	@sed -i~ -e 's|#cmakedefine SECUTILS_USE_ICV|/* #undef SECUTILS_USE_ICV */|' $@
endif
ifdef SECUTILS_NO_TLS
	@sed -i~ -e 's|#cmakedefine SECUTILS_NO_TLS|#define SECUTILS_NO_TLS|' $@
else
	@sed -i~ -e 's|#cmakedefine SECUTILS_NO_TLS|/* #undef SECUTILS_NO_TLS */|' $@
endif

# Binary output target
$(OUT_DIR)/$(OUTLIBV): $(OBJS)
	$(CC) $(OBJS) $(LDFLAGS) -shared -o $@ -Wl,-$(SONAME)$(OUTLIBV)

$(OUT_DIR)/$(OUTLIB): $(OUT_DIR)/$(OUTLIBV)
	ln -sf $(OUTLIBV) $(OUT_DIR)/$(OUTLIB)

# Individual object targets; also provide dependencies on header files of the project (not on system headers)
$(BUILDDIR)/%$(OBJ): %.c $(SECUTILS_CONFIG)
	 $(CC) $(CFLAGS) $(LOCAL_CFLAGS) -c $< -o $@
	@$(CC) $(CFLAGS) $(LOCAL_CFLAGS) -MM $< -MT $@ -MF $(BUILDDIR)/$*.d
DEPS = $(OBJS:$(OBJ)=.d)
ifeq ($(findstring clean,$(MAKECMDGOALS)),)
-include $(DEPS)
endif

# Build directory generation
$(BUILDDIR):
	mkdir -p $(BUILDDIR)

# Order-only dependency for objects on build dir - prevents unnecessary rebuilds
# (directories are flagged as changed on every object build)
$(OBJS): | $(BUILDDIR)

deb:
	debuild -e OPENSSL_DIR="$(OPENSSL_DIR)" -e OPENSSL_LIB="$(OPENSSL_LIB)" \
	  --preserve-envvar SECUTILS_NO_TLS \
	  --preserve-envvar SECUTILS_USE_ICV \
	  --preserve-envvar SECUTILS_USE_UTA -uc -us \
	  --lintian-opts --profile debian # --fail-on none
# alternative:
#	LD_LIBRARY_PATH= dpkg-buildpackage -uc -us # may prepend DH_VERBOSE=1

clean_deb:
	rm -rf debian/{.debhelper,tmp,libsecutils{,-dev,-bin}} debian-packaging
	rm -f debian/{files,debhelper-build-stamp} debian/*.{log,substvars}
	rm -f ../libsecutils*.{deb,dsc,build*,changes,tar.gz}
	rm -fr _CPack_Packages changelog.gz
	rm -f libsecutils*.{deb,tar.gz,zip}

# installation target - append ROOTFS=<path> to install into virtual root
# filesystem
install: # doc/html $(OUT_DIR)/$(OUTLIB) $(OUT_DIR)/$(OUTBIN)
	install -D $(OUT_DIR)/$(OUTLIBV) $(DEST_LIB)/$(OUTLIBV)
	ln -sf $(OUTLIBV) $(DEST_LIB)/$(OUTLIB)
#install_headers:
	mkdir -p $(DEST_INC)/include/secutils
	cd src/libsecutils; find include/secutils -type d -exec install -d '$(DEST_INC)/{}' ';'
	cd src/libsecutils; find include/secutils -type f -exec install -Dm 0644 '{}' '$(DEST_INC)/{}' ';'
#install_bins:
ifeq ($(SECUTILS_USE_ICV),)
	touch $(OUT_DIR)/$(OUTBIN) # workaround for Debian packaging
else
	install -D ./$(OUTBIN) $(DEST_BIN)/$(OUTBIN)
endif
	install -D $(OUT_DIR)/$(OUTBIN) $(DEST_BIN)/$(OUTBIN)
#install_doc:
	ln -sf doc/html
	find html/ -type d -exec install -d '$(DEST_DOC)/{}' ';'
	find html/ -type f -exec install -Dm 0644 '{}' '$(DEST_DOC)/{}' ';'
	rm html

uninstall:
	rm -fr $(DEST_LIB)/$(OUTLIB_)*$(DLL)*
#	find include -type f -exec rm '$(DEST_PRE)/{}' ';'
	rm -rf $(DEST_INC)/include/secutils
	rm -f $(DEST_BIN)/$(OUTBIN)
	rm -rf $(DEST_DOC)/doc/html

clean_uta:
	rm -fr $(BUILDDIR)/uta_api$(OBJ) $(BUILDDIR)/files_icv$(OBJ) \
          $(BUILDDIR)/files_dv$(OBJ) \
          $(OUT_DIR){,/src/libsecutils}/$(OUTLIB_)*$(DLL)* $(OUT_DIR){,/src/util}/$(OUTBIN) $(OUT_DIR)/util/icvutil$(OBJ)

clean: clean_config
	rm -fr $(OUT_DIR)/$(OUTLIB_)*$(DLL)*
	rm -f $(OUT_DIR)/$(OUTBIN)
	$(MAKE) -C src/util -f Makefile_v1 clean OUT_DIR="$(OUT_DIR)"
	rm -fr $(BUILDDIR)

clean_config:
	rm -f $(SECUTILS_CONFIG){,~}

clean_all: clean clean_deb
	find . \( -name "*.cmake" -o -name Makefile \) \
	  -not -path ./src/libsecutils/security-utilities_libraryConfig.cmake \
	  -not -path ./src/util/security-utilities_icvutilConfig.cmake \
	  -not -path ./coverage/Makefile \
	  | xargs rm
	find . -name CMakeFiles | xargs rm -r
	rm -f install_manifest*.txt
	rm -fr doc refman.pdf CMakeDoxyfile.in Doxyfile.security-utilities_doxygen Doxyfile.doc *.gcov reports
	rm -fr _CPack_Packages Makefile CMakeCache.txt

doc: $(SECUTILS_CONFIG) doc/html refman.pdf

doc/html: Doxyfile $(wildcard src/libsecutils/include/*/*.h src/libsecutils/include/*/*/*.h)
	doxygen Doxyfile 1>/dev/null || mkdir -p doc/html # required packages: doxygen graphviz

refman.pdf: doc/html
	mkdir -p doc/latex
	@# for producing doc/latex/*, comment out in Doxyfile: GENERATE_LATEX = NO
	@# $(MAKE) -C -f Makefile_v1 doc/latex && cp -a doc/latex/refman.pdf . # requires latex

coverage: clean
	$(MAKE) -f Makefile_v1 COMPILE_TYPE=code_coverage
